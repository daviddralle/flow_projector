# -*- coding: utf-8 -*-
"""flow_projector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aNmsWSgtx21DJyJdQ884hcvNWsgfz4xh

# Import libraries and pull data
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from shapely.geometry import Polygon
from scipy.optimize import curve_fit
import geopandas as gp
import glob
import matplotlib
import pickle
import datetime
import time
from scipy.integrate import odeint
from scipy.interpolate import interp1d as interp1d
import scipy
from scipy.integrate import solve_ivp
from pynhd import NLDI, WaterData, NHDPlusHR
import pynhd as nhd
from pygeohydro import NWIS
import warnings
warnings.filterwarnings('ignore')

def getFlow(site,start,stop):
  nwis = NWIS()
  nldi = NLDI()
  df = nwis.get_streamflow(site, (start,stop), freq="dv")
  df.columns = ['q']
  df.index = pd.to_datetime(df.index)
  df = df.tz_localize(None)
  df = df.resample('D').mean()
  basin = nldi.get_basins(site).to_crs('epsg:26910')

  try:
    geoms = [item for item in list(basin.geometry[0])]
    idx = np.argmax([item.area for item in geoms])
    basin.geometry = [geoms[idx]]
    print('Found multipolygon - fixing')
  except:
    basin.geometry = basin.geometry
  area_mm2 = basin.to_crs('epsg:26910').geometry[0].area*1000**2
  # df = 2.44657555e12*df[['q']]/area_mm2
  # df = 8.64e13*df[['q']]/area_mm2
  # df.q = df.q.astype(float, errors='ignore')
  df.q = 35.3147*df.q
  df.columns = [site]
  return df, basin

# Sensitivity function [see Kirchner, 2009] doi:10.1029/2008WR006912
def gQ(q,p):
    if np.size(np.array(q)) == 1: return np.exp(np.sum([p[i]*np.log(q)**(len(p)-i-1) for i in range(len(p))]))
    return [np.exp(np.sum([p[i]*np.log(qq)**(len(p)-i-1) for i in range(len(p))])) for qq in np.array(q)]

# Bin dq/dt data
def KirchnerBinning(df, min_per_bin = 10, loud=False, binsizefrac=0.01):
    df = df.sort_values('q',ascending=False)
    logQ = np.array(np.log(df.q))
    logRange = np.max(logQ) - np.min(logQ)
    minBinSize = logRange*binsizefrac
    binBoundaries = [0]
    for i in range(1,len(df)):
        if abs(logQ[i] - logQ[binBoundaries[-1]]) < minBinSize:
            if loud: print('Bin too small')
            continue

        if abs(i-binBoundaries[-1]) < min_per_bin:
            if loud: print('Not enough data points')
            continue

        curr = df.dq[binBoundaries[-1]:i]
        if np.std(-curr)/np.sqrt(abs(i-binBoundaries[-1])) > np.mean(-curr)/2:
            if loud: print('Bin too heterogeneous')
            continue

        binBoundaries.append(i)
    return binBoundaries

"""# Read and format flow data"""

T = 90
now = pd.to_datetime(datetime.datetime.now().strftime('%Y-%m-%d'))
start = now - pd.to_timedelta(365,unit='d')
stop = now
future_stop = now + pd.to_timedelta(T,unit='d')
start = start.strftime('%Y-%m-%d')
stop = stop.strftime('%Y-%m-%d')
stop_datetime = pd.to_datetime(stop)
future_stop = (future_stop - pd.to_timedelta(1,unit='d')).strftime('%Y-%m-%d')
future_stop_datetime = pd.to_datetime(future_stop)
stop_datetime = pd.to_datetime(stop)
twomonths = (stop_datetime - pd.to_timedelta(90,unit='d')).strftime('%Y-%m-%d')

# Grab Elder data
site = '11476500'
df, basin = getFlow(site,start, stop)
QS = []
DQS = []

qs = df[site].loc[twomonths:stop].values
dqs = np.gradient(qs)
idx = (dqs<0)&(qs>0)
QS = qs[idx]
DQS = dqs[idx]

p = np.polyfit(x=np.log(QS), y=np.log(-DQS), deg=2)
x = np.log(QS)
x = np.sort(x)
# f,ax = plt.subplots(figsize=(4,3))
# ax.plot(x, p[2] + p[1]*x + p[0]*x**2,lw=2,c='limegreen')
p[1] = p[1] - 1

# integrate to get natural and impaired flows

t = np.linspace(0,T,T)
new_dates = pd.to_datetime(stop)

def fun(time,q):
  return -gQ(q,p)*q
q0 = df[site].values[-1]
sol = solve_ivp(fun, [0, t[-1]], [q0], rtol = 1e-5)
sol_int = interp1d(sol.t,sol.y[0],fill_value=0,bounds_error=False)
natQ = sol_int(t)

idx = pd.date_range(stop_datetime-pd.to_timedelta(1,unit='d'), future_stop_datetime - pd.to_timedelta(1,unit='d') , freq='D')
natQ = pd.DataFrame({'Flow projection':natQ},index=idx)
f,ax = plt.subplots(figsize=(6,3))
df.plot(ax=ax,c='k')
natQ.plot(ax=ax,c='r')
ax.scatter(natQ.index.values[0],natQ.values[0],ec='k',fc='r',zorder=10)
ax.set_yscale('log')
ax.set_xlim(stop_datetime-pd.to_timedelta(60,unit='d'), future_stop_datetime)
sns.despine()
ax.set_ylabel('Q [cfs]')
f.tight_layout()
f.savefig('flow_projection.png',dpi=300)